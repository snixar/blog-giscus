name: Akismet Discussion Comment Checker (GraphQL)
on:
  discussion_comment:
    types: [created]

jobs:
  check-akismet:
    runs-on: ubuntu-latest
    steps:
      - name: 检查并删除垃圾评论
        env:
          AKISMET_API_KEY: ${{ secrets.AKISMET_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_AUTHOR: ${{ github.event.comment.user.login }}
          COMMENT_NODE_ID: ${{ github.event.comment.node_id }}
          COMMENT_HTML_URL: ${{ github.event.comment.html_url }}
          DISCUSSION_TITLE: ${{ github.event.discussion.title }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          set -uo pipefail
          
          echo "============================================"
          echo "🤖 开始 AKISMET 垃圾评论检测 (GraphQL)"
          echo "============================================"
          echo "⏰ 检测时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "👤 评论作者: ${COMMENT_AUTHOR}"
          echo "📝 评论长度: ${#COMMENT_BODY} 个字符"
          echo "🗂️ 仓库名称: ${REPO_OWNER}/${REPO_NAME}"
          echo "💬 讨论标题: ${DISCUSSION_TITLE}"
          echo "🔗 评论链接: ${COMMENT_HTML_URL}"
          echo "🆔 Comment Node ID: ${COMMENT_NODE_ID}"
          echo ""
          
          echo "📄 评论内容:"
          echo "----------------------------------------"
          echo "${COMMENT_BODY}"
          echo "----------------------------------------"
          echo ""
          
          # 构建 Akismet API 请求
          echo "🌐 AKISMET API 请求信息:"
          AKISMET_URL="https://${AKISMET_API_KEY}.rest.akismet.com/1.1/comment-check"
          echo "📡 API 接口: ${AKISMET_URL:0:30}...comment-check"
          echo "🏠 博客地址: https://github.com/${REPO_OWNER}/${REPO_NAME}"
          echo ""
          
          echo "🔄 正在发送请求到 Akismet..."
          AKISMET_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}\nTOTAL_TIME:%{time_total}" \
            -X POST "$AKISMET_URL" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -H "User-Agent: GitHubActionBot/1.0" \
            --data-urlencode "blog=https://github.com/${REPO_OWNER}/${REPO_NAME}" \
            --data-urlencode "user_ip=127.0.0.1" \
            --data-urlencode "user_agent=GitHubActionBot/1.0" \
            --data-urlencode "comment_type=comment" \
            --data-urlencode "comment_author=${COMMENT_AUTHOR}" \
            --data-urlencode "comment_content=${COMMENT_BODY}" \
            2>/dev/null || echo "false")
          
          # 解析响应
          SPAM_CHECK_RESULT=$(echo "$AKISMET_RESPONSE" | head -n1)
          HTTP_CODE=$(echo "$AKISMET_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          RESPONSE_TIME=$(echo "$AKISMET_RESPONSE" | grep "TOTAL_TIME:" | cut -d: -f2)
          
          echo "📊 AKISMET 响应结果:"
          echo "📈 HTTP 状态码: ${HTTP_CODE:-未知}"
          echo "⏱️ 响应时间: ${RESPONSE_TIME:-未知}秒"
          echo "🎯 垃圾评论检测结果: '${SPAM_CHECK_RESULT}'"
          echo ""
          
          # 检查是否为垃圾评论
          if [ "$SPAM_CHECK_RESULT" = "true" ]; then
            echo "🚨 检测到垃圾评论!"
            echo "============================================"
            echo "🗑️ 正在使用 GraphQL API 删除垃圾评论..."
            echo ""
            
            # 使用 GraphQL API 删除评论
            echo "🔍 GitHub GraphQL API 删除请求:"
            echo "📡 API 接口: https://api.github.com/graphql"
            echo "🆔 Comment Node ID: ${COMMENT_NODE_ID}"
            echo "🔑 认证令牌: token ${GITHUB_TOKEN:0:8}..."
            echo ""
            
            # 构建 GraphQL 删除评论的 mutation
            GRAPHQL_MUTATION='{
              "query": "mutation DeleteDiscussionComment($commentId: ID!) { deleteDiscussionComment(input: { id: $commentId }) { clientMutationId } }",
              "variables": {
                "commentId": "'${COMMENT_NODE_ID}'"
              }
            }'
            
            echo "🔄 正在发送 GraphQL 删除请求..."
            DELETE_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}\nTOTAL_TIME:%{time_total}" \
              -X POST "https://api.github.com/graphql" \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Content-Type: application/json" \
              -H "User-Agent: AkismetBot/1.0" \
              -d "$GRAPHQL_MUTATION" \
              2>/dev/null || echo "DELETE_ERROR")
            
            DELETE_HTTP_CODE=$(echo "$DELETE_RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
            DELETE_TIME=$(echo "$DELETE_RESPONSE" | grep "TOTAL_TIME:" | cut -d: -f2)
            DELETE_BODY=$(echo "$DELETE_RESPONSE" | head -n -2)
            
            echo "📊 删除请求响应:"
            echo "📈 HTTP 状态码: ${DELETE_HTTP_CODE:-未知}"
            echo "⏱️ 响应时间: ${DELETE_TIME:-未知}秒"
            echo "📄 响应内容: ${DELETE_BODY}"
            echo ""
            
            # 检查是否删除成功
            if [ "$DELETE_HTTP_CODE" = "200" ]; then
              # 检查 GraphQL 响应中是否有错误
              if echo "$DELETE_BODY" | grep -q '"errors"'; then
                echo "❌ GraphQL 错误: 删除失败"
                echo "🔍 错误详情:"
                echo "$DELETE_BODY" | jq '.errors' 2>/dev/null || echo "$DELETE_BODY"
                
                # 分析常见错误
                if echo "$DELETE_BODY" | grep -q "Resource not accessible"; then
                  echo "⚠️ 资源不可访问 - 可能是权限问题或评论已被删除"
                elif echo "$DELETE_BODY" | grep -q "Could not resolve to a node"; then
                  echo "⚠️ 无法解析节点ID - Node ID 可能不正确"
                else
                  echo "⚠️ 其他 GraphQL 错误"
                fi
              else
                echo "✅ 成功: 垃圾评论已成功删除"
                echo "🎉 来自 @${COMMENT_AUTHOR} 的评论已被移除"
                echo "📄 删除结果: ${DELETE_BODY}"
              fi
            else
              echo "❌ 失败: HTTP 请求失败"
              echo "🔍 HTTP 状态码: ${DELETE_HTTP_CODE}"
              echo "📄 错误响应: ${DELETE_BODY}"
            fi
            
          elif [ "$SPAM_CHECK_RESULT" = "false" ]; then
            echo "✅ 正常评论"
            echo "============================================"
            echo "🟢 Akismet 判定这不是垃圾评论"
            echo "✨ 来自 @${COMMENT_AUTHOR} 的评论被允许"
            
          else
            echo "⚠️ AKISMET 错误"
            echo "============================================"
            echo "❌ Akismet API 返回意外响应"
            echo "📄 原始响应: '${SPAM_CHECK_RESULT}'"
            echo "📈 HTTP 状态码: ${HTTP_CODE:-未知}"
            
            if [ "$HTTP_CODE" != "200" ]; then
              echo "🔍 这可能表示 API 密钥问题或服务故障"
            fi
          fi
          
          echo ""
          echo "============================================"
          echo "🏁 AKISMET 垃圾评论检测完成"
          echo "⏰ 结束时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "============================================"
